Building Pipeline:
1> Create a GitHub repo and clone it in local 
2> Add projectflow.txt to follow the actions taken
3> Create a new folder experiments and add 2 files downloaded from the Vikas Das repositories.  
One is a .ipynb file and another is a datafile which has spam details.
4> Add src folder along with all components(run them individually).

i> data_ingestion.py
ii> data_preprocessing.py
iii> feature_engineering.py
iv> model_training.py
v> model_evaluation.py

5) Add data, models, reports directories to .gitignore file
6) Now git add, commit, push
---------------------------------------------------------------------------
Setting up dcv pipeline (without params)
8> Create dvc.yaml file and add stages to it.
9> dvc init then do "dvc repro" to test the pipeline automation. (check dvc dag)
10> Now git add, commit, push
------------------------------------------------------------------------------
Setting up dcv pipeline (with params)
11> add params.yaml file
12> Add the params setup (mentioned below)
    i> change in the data_ingestion.py, feature_engineering.py, model_training.py
    ii> change in the dvc.yaml file to include the parameters
13> Do "dvc repro" again to test the pipeline along with the params
14> Now git add, commit, push
----------------------------------------------------------------------------------
Expermients with DVC:
15> pip install dvclive
16> Add the dvclive code block 
-------------------------------------------------------------------------------

dvclive code block:
1> import dvclive and yaml:
from dvclive import Live
import yaml
2> Add the load_params function and initiate "params" var in main
3> Add below code block to main:
with Live(save_dvc_exp=True) as live:
    live.log_metric('accuracy', accuracy_score(y_test, y_test))
    live.log_metric('precision', precision_score(y_test, y_test))
    live.log_metric('recall', recall_score(y_test, y_test))

    live.log_params(params)
-------------------------------------------------------------------
17> Do "dvc exp run", it will create a new dvc.yaml(if already not there) and dvclive directory (each run will be considered as an experiment by DVC)
15> Do "dvc exp show" on terminal to see the experiments or use extension on VSCode (install dvc extension)
16> Do "dvc exp remove {exp-name}" to remove exp (optional) | "dvc exp apply {exp-name}" to reproduce prev exp
17> Change params, re-run code (produce new experiments)
18> Now git add, commit, push

-------------------------------------------------------------------------------------------------
Adding a remote S3 storage to DVC:
1> login to AWS console
2> create an IAM user
3> create S3 bucket
4> pip install dvc[s3]
5> pip install awscli
6> run "Ã¤ws configure" on terminal
7> dvc remote add -d dvcstore s3://<bucketname>
8> dvc commit, dvc push will push the exp outcome that you want to keep into S3 bucket